/*
Copyright 2008, 2009 by Colceriu Cristian

This file is part of AgileWiki and is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License (LGPLv3) as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.

This code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General 
Public License v3 for more details: http://www.opensource.org/licenses/lgpl-3.0.html

Note however that only Java and JavaScript files are being covered by LGPL, 
all other files are covered by the Common Public License (CPL). A copy of 
this license can be found as well at http://www.opensource.org/licenses/cpl1.0.txt
*/
	
	jQuery.fn.window = function(options) {
	

		var settings = jQuery.extend({ width: 400, height: 400, isRun: false },options);            
		var window_id = $(this).attr("id");
		var task_id = $(this).attr("id")+"-task";
		var selectedWindow = settings.selectedWindow;
		$.debug("window.js selectedWindow = "+selectedWindow,3);
		
		//$.debug("new win width  = "+settings.width);
		//$.debug("new win height = "+settings.height);
		//$.debug("new win left   = "+settings.left);
		//$.debug("new win top    = "+settings.top);
		
		var taskTextDir_class = "";
		
		if (settings.rtl == true)
		{
			taskTextDir_class = "text-rtl";		
		}
		else
		{
			taskTextDir_class = "text-ltr";
		}
		
		var task_button = "#taskbar #"+task_id;
		var title = $(this).attr("title");
		var self = this;
		
		//settings.isRun = $(this).attr("class")=="ui-dialog-content";
		settings.isRun = $(this).hasClass("ui-dialog-content");
		

		function activate()
		{
			$.debug('task bar button clicked ....');
			$.debug('unminimizing');
			$(".task").removeClass("task-on");
			$(task_button).addClass("task-on");
		}	

		function iFrameFix(iFrameNo)
		{
			$('#temp_div'+iFrameNo).remove();		
			ifr = $('#iframe'+iFrameNo);
			//alert('#iframe'+iFrameNo);
			//alert($('#iframe'+iFrameNo).html());

			var d = $('<div></div>');
			ifr.after(d[0]);
			d[0].id = 'temp_div'+iFrameNo;
			d.css({position:'absolute'});
			d.css({top: ifr.position().top, left:0});
			d.height(ifr.height());
			d.width('100%');
		}	

		function setFocus(self)
		{
			$("#window-menu").fadeOut("fast");
			$.debug('window id = '+self.attr("id"));
					
			var windowName = self.data("name");
			$.debug('Window focus on '+windowName,2);
					
			if (windowName != null)
			{
				//_cometd.publish(channelId, {'target': '~/Desktop/'+windowName, 'userEvent': {'action': 'Select'}});
				$.comms.publish({'target': '~/Desktop/'+windowName, 'userEvent': {'action': 'Select'}});
			}
			else
			{
				$.debug('Not sending');
			}
		}
              
		if(settings.isRun) {  
			//activate();
			self.parent().show(); // show window if minimized   
		}         
		else 
		{                     
			$(this).dialog({ 			
			//$('#iframe0').dialog({     
				width: settings.width,
				height: settings.height,
				modal: settings.modal,
				//icon : '/images/Folder_Plain_24.png',
				icon : settings.icon,
				
				open: function(){
					// Fixing the drag better than iFrameFix : true
					// iFrameFix(window_id);
					// iframe is not yet in place
					$(this).parent().resizable();
					//alert('opened');
				},

				close: function() {
					$(task_button).hide("slow", function() {
						$("#taskbar #"+task_id).remove();
					});            
					$(this).dialog("destroy");
					$.debug('deleting window');
					//_cometd.publish(channelId, {'target': '~/Desktop/'+$(this).data("name"), 'userEvent': {'action': 'DeleteWindow'}});
					$.comms.publish({'target': '~/Desktop/'+$(this).data("name"), 'userEvent': {'action': 'DeleteWindow'}});  
					       
				},
				
				// called from ui.dialog.aw.js or triggered on server-side message
				minimize: function() {
					var self = $(this);
					if ($(self).data("minimized") == null || $(self).data("minimized") != true)
					{
						$.debug('Minimize ...');
						
						if ($(self).data("trigger") == null || $(self).data("trigger").remote == false) //means event was generated by a click
						{
							$.debug('-->Sending Minimize True');
							//_cometd.publish(channelId, {'target': '~/Desktop/'+self.data("name"), 'userEvent': {'action': 'Minimize', 'minimize': true}});
							$.comms.publish({'target': '~/Desktop/'+self.data("name"), 'userEvent': {'action': 'Minimize', 'minimize': true}});  
						}

						/*$.debug("setting window dim");
						$('#'+window_id).data("dim", { 
							//maximized: true , 
							width: self.dialog('option', 'width'), 
							height: self.dialog('option', 'height'), 
							top: self.parent().css('top'), 
							left: self.parent().css('left'),
							innerWidth: self.css('width'), 
							innerHeight: self.css('height')
						});*/
						
						$.debug('Setting Minimized = true'); 
						self.data("minimized", true);
						
					}
				},
				

				// called from ui.dialog.aw.js or triggered on server-side message
				maximize: function(event) {

					$.debug('Mximize event triggered ',2);

					// Store the old dimensions and the fact that it was maximized
					
					self = $(this);
					
		
					if ($(self).data("maximized") ==  null)
					{
						$.debug('$(#window_id).data("maximized") = undefined');
					}

					
					if ($(self).data("maximized") == null) 
					{
						$.debug("maximized was null setting to false!!!!");
						$(self).data("maximized",false);
					}
					
					if ($(self).data("minimized") == null) 
					{
						$.debug("minimized was null setting to false!!!!");
						$(self).data("minimized",false);
					}
					
					$.debug('$(self).data("maximized") = '+$(self).data("maximized"));
					$.debug('$(self).data("minimized") = '+$(self).data("minimized"));

					
					if (($(self).data("maximized") == true && $(self).data("minimized") == false) || ($(self).data("minimized") == true && $(self).data("maximized") == false))
					{
						$.debug('Unmaximizing '+self.id,2);

						
						if ($(self).data("trigger") == null || $(self).data("trigger").remote == false) //means event was generated by a click
						{
							$.debug('Sending Maximize False');
							//_cometd.publish(channelId, {'target': '~/Desktop/'+self.data("name"), 'userEvent': {'action': 'Maximize', 'maximize': false}});
							$.comms.publish({'target': '~/Desktop/'+self.data("name"), 'userEvent': {'action': 'Maximize', 'maximize': false}}); 
						}
						else
						{
							if ($(self).data("dim") != null)
							{
								var dlgTop = $(self).data("dim").top;
								var dlgLeft = $(self).data("dim").left;
								var innerWidth = $(self).data("dim").innerWidth;	
								var innerHeight = $(self).data("dim").innerHeight;
						
								self.dialog('option', 'width', $(self).data("dim").width);
								self.dialog('option', 'height', $(self).data("dim").height);
						
								//self.data("state", { maximized: false });
						
								$.debug("setting dlgTop="+dlgTop);
								self.parent().css('top',dlgTop).css('left',dlgLeft);
								self.css('width',innerWidth).css('height',innerHeight);
							}
						
							// Non-Maximized window is absolute
							//$(this).parent().css("position","relative");
						
							// working
							$(self).data("minimized",false);
							$.debug('Setting Minimized = false'); 
							
							$("#windows").css("position","relative");
							
							//$(self).css("position","relative");
							//self.parent().css("position","relative");
							
							self.parent().show(); // show window if minimized 
							//$(".ui-dialog").show();
							$.scrollToWindow(window_id);
							
							//self.parent().resizable('disable');
							self.dialog('option', 'resizable', true);
							self.dialog('option', 'draggable', true);
							$.debug("resizable = "+self.dialog('option', 'resizable'));
							$.debug("draggable = "+self.dialog('option', 'draggable'));
						}					
					}
					else
					{
						// Maximize
						
						$.debug('Maximizing '+$(self).attr('id'),2);
						
						if ($(self).data("trigger") == null || $(self).data("trigger").remote == false) //means event was generated by a click
						{
							$.debug('Sending Maximize True...');
							//_cometd.publish(channelId, {'target': '~/Desktop/'+self.data("name"), 'userEvent': {'action': 'Maximize', 'maximize': true}});
							$.comms.publish({'target': '~/Desktop/'+self.data("name"), 'userEvent': {'action': 'Maximize', 'maximize': true}}); 
						}
						else
						{
							// Do not want to record the dimensions if previously minimized
							if ($(self).data("minimized") == false)
							{
								$.debug("setting window dim");
								$(self).data("dim", { 
									//maximized: true , 
									width: self.dialog('option', 'width'), 
									height: self.dialog('option', 'height'), 
									top: self.parent().css('top'), 
									left: self.parent().css('left'),
									innerWidth: self.css('width'), 
									innerHeight: self.css('height')
								});
							}
							
							var dlgTop = $(self).data("dim").top;
							$.debug("getting dlgTop="+dlgTop);
						
							//self.dialog('option', 'width', $('#desktop-holder').css('width'));
							
							
							
							// Not very flexible but will do until I figure out how to calculate the 7
							

							//$("#desktop-holder").stop(true,true);
							//self.stop(true,true);
							//self.prev().stop(true,true);
							self.parent().stop(true,true);
							self.parent().width(($('#desktop-holder').width()-7));

							
							//self.parent().width(($('#desktop-holder').width()-7));
							
							self.dialog('option', 'height', $('#desktop-holder').css('height'));
							
							//experiments trying to calculate the width ...
							
							//self.parent().width(($('#desktop-holder').width()));
							//$.debug('max css width = '+$('#desktop-holder').css('width'));
							//$.debug('max width() = '+$('#desktop-holder').width());
							//$.debug('max innerWidth() = '+$('#desktop-holder').innerWidth());
							
							//$.debug('max css border = '+$('#desktop-holder').parent().css('border'));
							//$.debug('class = '+self.parent().attr('class'));
							//$.debug('css padding left  = '+self.parent().css('padding-left'));
							//$.debug('css padding right = '+self.parent().css('padding-right'));
							//$.debug('css border = '+self.parent().css('border-left'));
							//$.debug('innerWidth  = '+self.parent().innerWidth());
							//$.debug('class  = '+self.parent().attr('style'));
							//$.debug('innerWidth  = '+$('#desktop-holder').innerWidth());
							//$.debug('ui dialog '+$('.ui-dialog').css('padding'));
							
							//console.log($(this).html());
							self.css('width','auto').css('height','auto');
					
							// this should work but doesn't so bypassed it
							//$(this).dialog('option', 'position', ['0px','0px']);
						
							self.parent().css('top','0px').css('left','0px');
						
							//$("#windows").css("position","fixed");
						
						
							// Maximized window is absolute
							//$(this).parent().css("position","absolute");
							//$("#windows").css("position","fixed");
						
							// working (nothing here)
							$(self).data("minimized",false);
							$.debug('Setting Minimized = false'); 
							
							$("#windows").css("position","fixed");
							//$(self).css("position","fixed");
							//self.parent().css("position","fixed");
							
							
							//$(".ui-dialog").css("position","relative");
							self.parent().show(); // show window if minimized
							
							
							
							self.dialog('option', 'resizable', false);
							self.dialog('option', 'draggable', false);
							
							$.debug("resizable = "+self.dialog('option', 'resizable'));
							$.debug("draggable = "+self.dialog('option', 'draggable'));
							
							/*$(self).parent().removeClass('ui-resizable');
							$.debug($(self).parent().attr('class'));*/
							
						}
					}
					$.debug("'trigger', { remote: false }");
					$(self).data("trigger", { remote: false });
					//self.trigger('click');

					$.setWindowFront(self.parent());
					$.debug("end maximize");
				},
				
				// called from ui.dialog.aw.js or triggered on server-side message
				refresh: function() {
					$.debug("-------------------------------------------------------------------------sending refresh");
					$.comms.publish({'target': '~/Desktop/'+self.data("name"), 'userEvent': {'action': 'RefreshWindow'}});  
				},
				
				// called from ui.dialog.aw.js or triggered on server-side message
				view: function() {

					//$.debug("triggering focus --------------------------->",2);					
					//$(self).trigger('focus');

					setFocus($(self));

					$.debug("----------------------------------------------------+++---------------------view triggered",2);
					$.debug("window name = "+self.data("name"),2);
					if ($(self).data("trigger") == null || $(self).data("trigger").remote == false) //means event was generated by a click
					{
						$.comms.publish({'target': '~/Desktop/'+self.data("name"), 'userEvent': {'action': 'Menu'}});
					}
					else
					{
						//Display view
						
						var buttonLeft = $('#titleBar'+window_id+' .ui-dialog-titlebar-view').css('left').replace("px","");
						var windowLeft = $(self).parent().css('left').replace("px","");
						
						var left = parseInt(windowLeft)+parseInt(buttonLeft);

						var windowTop = $(self).parent().css('top').replace("px","");
						var titleHeight = $('#titleBar'+window_id).height();
						
						var top = parseInt(windowTop)+titleHeight;
						
						$.debug('left= '+left);
						//$.debug('right = '+right);
						$.debug('top = '+top);
						
						var views = $(self).data("views");
						var windowMenuLinks = "";
						
						for (i=0; i < views.length; i++)
						{
							windowMenuLinks += "<a id = '"+views[i][0]+"' href='#'>"+views[i][1]+"</a>";
						}
						
						$("#window-menu").html(windowMenuLinks);
						$("#window-menu").fadeIn().css("left",left+"px").css("top",top+"px").css("position","absolute");
						
					}
					$(self).data("trigger", { remote: false });
				},

				resizeStart: function()
				{
					iFrameFix(window_id);
				},
				
				resizeStop: function()
				{
					// iFrame fix					
					$('#temp_div'+window_id).remove();					

					var top = $(this).parent().css('top').replace("px","");
					var left = $(this).parent().css('left').replace("px","");
					var width = $(this).parent().css('width').replace("px","");
					var height = $(this).parent().css('height').replace("px","");
					//height = height - 20 +"";
					
					//$.debug("resize height = "+height);
					//height = height - 20;
					//$.debug("resize height = "+height);
					
					//_cometd.publish(channelId, {'target': '~/Desktop/'+$(this).data("name"), 'userEvent': {'action': 'ResizeWindow', 'xPosition':mirrorIfRtl(left),'yPosition': top, 'width': width, 'height': height}});
					$.comms.publish({'target': '~/Desktop/'+$(this).data("name"), 'userEvent': {'action': 'ResizeWindow', 'xPosition':$.mirrorIfRtl(settings.rtl,left,width),'yPosition': top, 'width': width, 'height': height}});
				},
				
				focus: function()
				{
					setFocus($(this));
				},

				dragStart: function()
				{
					iFrameFix(window_id);
				},			
				
				dragStop: function()
				{
					// iFrame fix					
					$('#temp_div'+window_id).remove();	
					
					$.debug('dragStop'); 
					
					// change this to use data values attached to the element
					
					var top = $(this).parent().css('top').replace("px","");
					var left = $(this).parent().css('left').replace("px","");
					var width = $(this).parent().css('width').replace("px","");
					$.debug('mirrorIfRtl(left)'+$.mirrorIfRtl(settings.rtl,left));
					
					//$.debug("publish("+channelId+", {'target': '~/Desktop/'"+$(this).data("name")+",'userEvent': {'action': 'MoveWindow', 'xPosition':"+$.mirrorIfRtl(settings.rtl,left)+",'yPosition':"+top+"}})");
					
					//$.debug("publish("+channelId+", {'target': '~/Desktop/'"+$(this).data('name')+",'userEvent': {'action': 'MoveWindow', 'xPosition':"+:mirrorIfRtl(left));
					
					//_cometd.publish(channelId, {'target': '~/Desktop/'+$(this).data("name"), 'userEvent': {'action': 'MoveWindow', 'xPosition': mirrorIfRtl(left),'yPosition': top}});
					
					$.debug("settings.rtl = "+settings.rtl);
					
					$.debug("(sending) raw xPosition = "+left,5);
					$.debug("(sending) raw width = "+width,5);
					$.debug("sending xPosition = "+$.mirrorIfRtl(settings.rtl,left,width),5);
					
					$.comms.publish({'target': '~/Desktop/'+$(this).data("name"), 'userEvent': {'action': 'MoveWindow', 'xPosition': $.mirrorIfRtl(settings.rtl,left,width),'yPosition': top}});
					
					//$.comms.publish({'target': '~/Desktop/'+$(this).data("name"), 'userEvent': {'action': 'MoveWindow', 'xPosition': $.mirrorIfRtl(settings.rtl,left),'yPosition': top}});
					
					
					//_cometd.publish(channelId, {'target': '~/Desktop/'+$(this).data("name"), 'userEvent': {'action': 'MoveWindow', 'xPosition': left,'yPosition': top}});
					
					$.scrollToWindow($(this).attr("id"));
				},
				
				/*close: function()
				{
					
				}*/
				
				
				/* taken this out as it would mean altering the ui.dialog script making very ungeneric*/
				/*
				,activate: function() {
					console.log('activate!');						
					$(".task").removeClass("task-on");
					$(task_button).addClass("task-on");
				}*/
				
			
				
			});
			
			//Only stale windows show the refresh button
			$(".ui-dialog-titlebar-refresh").hide();
			
  			if (settings.rtl)
			{
				$(".ui-dialog").css("float","right");
				$(".ui-dialog-title").css("float","right");

				$(".ui-dialog-titlebar-close").css("left",".3em");
				$(".ui-dialog-titlebar-maximize").css("left","2.0em");
				$(".ui-dialog-titlebar-minimize").css("left","3.7em");
				$(".ui-dialog-titlebar-view").css("left","5.4em");
				$(".ui-dialog-titlebar-refresh").css("left","7.1em");
				$(".ui-dialog-title span").css("right","3.6em");
			}
			else
			{
				$(".ui-dialog-titlebar-close").css("right",".3em");
				$(".ui-dialog-titlebar-maximize").css("right","2.0em");
				$(".ui-dialog-titlebar-minimize").css("right","3.7em");
				$(".ui-dialog-titlebar-view").css("right","5.4em");
				$(".ui-dialog-titlebar-refresh").css("right","7.1em");
				$(".ui-dialog-title span").css("left","3.6em");		
			}	
			
			if (settings.modal == true)
			{
				$("#ui-dialog-title-"+window_id+" ~ .ui-dialog-titlebar-maximize").hide();
				$("#ui-dialog-title-"+window_id+" ~ .ui-dialog-titlebar-minimize").hide();
				$("#ui-dialog-title-"+window_id+" ~ .ui-dialog-titlebar-view").hide();
				$("#ui-dialog-title-"+window_id+" ~ .ui-dialog-titlebar-refresh").hide();
				//Make sure it's always on top!
				$(this).parent().css('z-index','1999');
				$('.ui-widget-overlay').css('z-index','1998');
			}	      
         
         // Add id to window and store as data
         
			//$(this).attr("id","content"+$(this).attr('id'));
         //$(this).data("id", $(this).attr('id').replace('wincontent-',''));
         
         //var iconLeft = $("#"+$(this).data("id")).css('left');
         //var iconTop = $("#"+$(this).data("id")).css('top');
         //console.log(iconLeft+","+iconTop);
         //console.log(settings.top);
         //console.log(settings.left);
         
         if (settings.top != "undefined")
         {
         	$(this).parent().css('top',settings.top)
         }
         
         if (settings.left != "undefined")
         {         
         	$(this).parent().css('left',settings.left);
         }
         
         
         //console.log("id="+$(this).attr('id'));
         
         
         
         //$(this).parent().draggable();
         
         // Make the window scroll with the desktop
         // working
         
         $("#windows").css("position","relative");
         
         // to preserve centering for modals only append to window if non modal
         
         if (settings.modal == false)
         {
         	$(this).parent().appendTo($("#windows").show());
		 }
			
			
			//$(this).parent().css('top','0px').css('left','0px');
			//$(this).parent().css("position","relative");
			//$(this).parent().css("position","absolute");
			//$(this).parent().appendTo($("#desktop-icons").show());
			
			//Needed to prevent weird window jumping and blocking issues 
			//even though icons have position:absolute and don't suffer the same issues
			//$(this).parent().css("position","");
			
			$(this).show();   
			//$.debug("window content = "+settings.content);
			//alert(settings.content);

			// content added here

			if(settings.content){
				$(this).append(settings.content);
				//windowAdded.call(this);
				//iFrameFix(window_id);
				//alert('content added');
			}

			if(settings.url) $(this).load("apps/"+settings.url);
			if(settings.script) $(this).getScript(settings.script);
		    
			if(title.length>20) title=title.substr(0, 17)+"..."; 
			
			
			
			$("#taskbar").append('<div id="'+task_id+'" class="task '+taskTextDir_class+'"><img src='+settings.icon+' /><span>'+title+'</span></div>');        
		
			//self.dialog("activate"); 

	
         //activate();         
		
			$(task_button).fadeTo("fast", 0.66);
                        
			$(task_button).hover(function() {
				$(this).fadeTo("fast", 1.00);
				//$(this).addClass("task-hover");        
			},
			function() {
				$(this).fadeTo("fast", 0.66);                  
				//$(this).removeClass("task-hover");
			});
			
			// Task button clicked here
        
			$(task_button).click(function() {        
				//activate();			
				//self.parent().show();
				
				$.debug("-------------------> "+$(this).attr('id'));
				$.debug("maximized = "+$(self).data("maximized"));
				$.debug("minimized = "+$(self).data("minimized"));
				$.debug("unminimizing :"+self.data("name"));
				
				// check the state of the button to determine what action to take on the corresponding window
				if ($(this).hasClass("task-on"))
				{
					if ($(self).data("minimized") == true)
					{
						//_cometd.publish(channelId, {'target': '~/Desktop/'+self.data("name"), 'userEvent': {'action': 'Minimize', 'minimize': false}});
						$.debug("minimized == true",2);
						$.comms.publish({'target': '~/Desktop/'+self.data("name"), 'userEvent': {'action': 'Minimize', 'minimize': false}});
				
					}
					else
					{
						//_cometd.publish(channelId, {'target': '~/Desktop/'+self.data("name"), 'userEvent': {'action': 'Minimize', 'minimize': true}});
						$.debug("minimized != true",2);
						$.comms.publish({'target': '~/Desktop/'+self.data("name"), 'userEvent': {'action': 'Minimize', 'minimize': true}});
						
					}
				}
				else
				{
					//$(".task").removeClass("task-on");
					//$(this).addClass("task-on");
					
					$.debug("task-on id = "+$(".task-on").attr('id'),2);
					$.debug("selectedWindow = "+selectedWindow,2);
					$.debug("selectedWindow maximized ? "+$(selectedWindow).data("maximized"),2);
					
					$.debug("++>win selected ("+selectedWindow+") = "+$(selectedWindow).data("name"));
  					$.debug("++>name selected = "+self.data("name"));
					
					if ($(selectedWindow).data("maximized") == true)
					{

						//_cometd.publish(channelId, {'target': '~/Desktop/'+$(selectedWindow).data("name"), 'userEvent': {'action': 'Maximize', 'maximize': false}});
						$.comms.publish({'target': '~/Desktop/'+$(selectedWindow).data("name"), 'userEvent': {'action': 'Maximize', 'maximize': false}});
					}
					
					
					$.debug('task-on id = '+$('.task-on').attr('id'));
					$.debug('window id = '+$(self).attr("id"));
					$.debug('window name = '+self.data("name"));
					//_cometd.publish(channelId, {'target': '~/Desktop/'+self.data("name"), 'userEvent': {'action': 'Select'}});
					$.comms.publish({'target': '~/Desktop/'+self.data("name"), 'userEvent': {'action': 'Select'}});
				}
			});
			
			// View selection
			
			$("#window-menu a").live('click', function() {
				selectedWindow = $('#windows').data('selected');
  				$.debug("-->win selected ("+selectedWindow+") = "+$(selectedWindow).data("name"),3);
  				$.debug("-->name selected = "+self.data("name"),3);
  				$.debug("-->view selected = "+this.id,3);
  				$.comms.publish({'target': '~/Desktop/'+$(selectedWindow).data("name"), 'userEvent': {'action': 'View', 'view': this.id}});
  				$("#window-menu").fadeOut();
  				$("#window-menu").html();
  				return false;
			});
			                   
		} 
           
		return this;                      
	};
